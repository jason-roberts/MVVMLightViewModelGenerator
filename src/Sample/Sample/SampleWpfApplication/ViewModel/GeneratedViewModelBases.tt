<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#

// HOW TO USE

// STEP 1 - select output namespace below
// STEP 2 - define your view models - see end part of this file
// STEP 3 - Build. This will generate a GeneratedViewModelBases.cs file containing base classes for each view model
// STEP 4 - Create classes that derive from the generated base classes, be sure to call the base class InitCommands(); in your constructor

#>

using System;
using System.Collections.ObjectModel;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;


<#
 // ******** STEP 1 ******** : Add usings here to namespace(s) containing to your models/entities/etc 
#>
using SampleWpfApplication.Model;



namespace <#=ViewModelGeneratorSettings.OutputNameSpace #>
{
<# foreach (var vm in ViewModelGeneratorSettings.ViewModelDefinitions)
{ #>
    public abstract class <#=  vm.Name #>Base :  ViewModelBase
    {
<#        foreach  (var p in vm.Properties)
{
            var typ = p.Item2;
            var name = p.Item1;
            var priv=name.ToLower();
#>
                public const string <#= name#>PropertyName = "<#= name#>";
                protected  <#= typ#> _<#= priv#>;

                public  <#= typ#> <#= name#>
                {
                    get
                    {
                        return _<#= priv#>;
                    }
                    set
                    {
                        if (_<#= priv#> == value)
                        {
                            return;
                        }
                        Set(ref _<#= priv#>, value);
                    }
                }
<#
}
#>

<#        foreach  (var c in vm.Commands)
{
            var priv= "_" + c.ToLower();
#>

        private RelayCommand <#= priv#>Command;
        public virtual RelayCommand <#= c#>Command
        {
            get
            {
				if (<#= priv#>Command == null)
				{
					<#= priv#>Command = new RelayCommand(Execute<#= c#>, CanExecute<#= c#>);
				}
                return <#= priv#>Command;
            }
        }

        protected virtual void Execute<#= c#>() {}
        protected virtual bool CanExecute<#= c#>() { return true;}
<#
}
#>
    }

<#
}
#>
}



<#+

    // ******** STEP 2 ******** 

    /// <summary>
    /// Make changes to this class to define what view models you want generating
    /// </summary>
    public  static class ViewModelGeneratorSettings
    {   
        // ********** Which name space the view model classes will live in
        public const string OutputNameSpace = "SampleWpfApplication.ViewModel";


        public static List<ViewModelDefinition> ViewModelDefinitions
        {
            get
            {
                return new List<ViewModelDefinition>()
                       {
                           // Define your view models here
                           new ViewModelDefinition
                           {
                               Name = "MainViewModel",
                               Properties =
                               {
                                   Tuple.Create("Who", "Person"), // here Who is the name of the command prop, Person is the type
                                   //Tuple.Create("NextTopic", "Topic"),
                                   //Tuple.Create("CurrentTopicTimeRemaining", "TimeSpan"),
                                   //Tuple.Create("TotalTimeRemaining", "TimeSpan"),
                                   //Tuple.Create("IsPlaying", "bool") // here IsPlaying is the name of the command prop, bool is the type
                               },
                               Commands =
                               {
                                   "Load", // Name of the commands
                                   //"Pause"
                               }
                           },
                           new ViewModelDefinition
                           {
                               Name = "AnotherViewModel",
                               Properties =
                               {
                                   Tuple.Create("SomeProperty", "int"),
                               },
                               Commands =
                               {
                                   "A",
                                   "B"
                               }
                           }, // etc.
                       };
            }
        }


        public sealed class ViewModelDefinition
        {
            public ViewModelDefinition()
            {
                Name = "Unknown";
                Properties = new List<Tuple<string, string>>();
                Commands = new List<string>();
            }
            public string Name { get; set; }
            public List<Tuple<string, string>> Properties { get; set; }
            public List<string>  Commands { get; set; }

        }
    }
 #>